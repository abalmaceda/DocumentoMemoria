@GLOSSDEF{ sql,
	word="SQL",
	definition="Structured Query Language"
}

@GLOSSDEF{ nosql,
	word="NoSQL",
	definition="Not Only \sqlNAME"
}

@GLOSSDEF{ rdbms,
	word="RDBMS",
	definition="Relational Database Management System"
}

@GLOSSDEF{ dbms,
	word="DBMS",
	definition="Database Management System"
}
\ordbms
@GLOSSDEF{ ordbms,
	word="ORDBMS",
	definition=" Object-Relational Database Management System"
}

@GLOSSDEF{ sku,
	word="SKU",
	definition="Stock-keeping unit"
}

@GLOSSDEF{ ecommerce,
	word="e-Commerce",
	definition="Electronic Commerce"
}

@GLOSSDEF{ json,
	word="JSON",
	definition="\javaScriptNAME Object Notation"
}

@GLOSSDEF{ waf,
	word="WAF",
	definition="Web Application Framework"
}

@GLOSSDEF{ mvc_sigla,
	word="MVC",
	definition="Se refiere al patrón arquitectónico Model-View-Controller."
}

@GLOSSDEF{ mvvm_sigla,
	word="MVVM",
	definition="Se refiere al patrón arquitectónico Model-View-ViewModel."
}

@GLOSSDEF{ seo_sigla,
	word="SEO",
	definition="\searchEngOptINT."
}

@GLOSSDEF{ sear_eng_opt,
	word="Search Engine Optimization",
	definition="Proceso de obtención de tráfico desde los resultados de búsqueda \freeCPT, \organicCPT, \editorialCPT o \naturalCPT en \searchEnginesCPT \cite{online_searchengineland_what_is_seo}"
}

SEO stands for “search engine optimization.” It is the process of getting traffic from the “free,” “organic,” “editorial” or “natural” search results on search engines.

@GLOSSDEF{ memory_ram,
	word="RAM",
	definition="Random Acces Memory"
}

@GLOSSDEF{ workload,
	word="workload",
	definition="Cantidad de trabajo que una maquina produce o puede producir para un periodo especifico de tiempo."
}

@GLOSSDEF{ analytic_processing,
	word="analytics",
	definition= "\textit{Analytics processing} es caracterizado por pocos usuarios (análisis de negocio en lugar de operaciones de clientes y POS) \textit{submitting} pocas \textit{request}, pero \textit{queries} pueden ser muy complejas y con intenso uso de recursos. El tiempo de respuesta es generalmente medido en decenas a cientos de segundos."
}

@GLOSSDEF{ transactional_processing,
	word="transactional",
	definition= "\textit{Transactional processing} es caracterizado por un largo número de de pequeñas, discretas, transacciones atómicas. El énfasis de los sistemas \gloss{oltp} es (a) \textit{high throughput (transactions per second)}, y (b) manterner integridad de datos en ambientes multiusuarios."
}

@GLOSSDEF{ oltp,
	word="OLTP",
	definition="Online Transaction Processing"
}

@GLOSSDEF{ hadoop_yarn,
	word="YARN",
	definition="Hadoop Yet Another Resource Negotiator, una plataforma responsable de la gestión de los recursos informáticos en clústers y utilizarlos para la programación de aplicaciones de los usuarios."
}

@GLOSSDEF{ hadoop_hdfs,
	word="HDFS",
	definition="Hadoop Distributed File System, un sistema de archivos distribuido que almacena datos en las máquinas , proporcionando un muy alto ancho de banda agregado a través de clústers."
}

@GLOSSDEF{ hadoop_mapreduce,
	word="MapReduce",
	definition="Modelo de programación para el procesamiento de datos a gran escala. "
}

@GLOSSDEF{ iops,
	word="IOPS",
	definition="(Input/Output Operations Per Second, pronounced eye-ops) es una medida de performance usada para benchmark dispositivos de almacenamiento para computadores como \gloss{hdd_disk}, \gloss{ssd_disk} y \gloss{san_disk}."
}

@GLOSSDEF{ ssd_disk,
	word="SSD",
	definition="Solid State Drives. "
}

@GLOSSDEF{ hdd_disk,
	word="HDD",
	definition="Hard Disk Drives"
}

@GLOSSDEF{ san_disk,
	word="SAN",
	definition="Storage Area Networks"
}

@GLOSSDEF{ mongodb,
	word="MongoDB",
	definition="Base de datos \textit{Document-Oriented}"
}

@GLOSSDEF{ brick_and_mortar,
	word="Brick-and-Mortar",
	definition="(También conocido como bricks-and-mortar o B\&M) es simplemente utilizado para describir presencia física de edificios o otras estructuras. El término \textit{brick-and-mortar \businessCOM} es también utilizado para referirse a empresas que poseen edificios, instalaciones de producción, o el almacén para las operaciones."
}

@GLOSSDEF{ business_to_business,
	word="Business to Business ",
	definition="Describe transacciones comerciales entre empresas, como entre un fabricante y un mayorista, o entre un mayorista y un \retailer. "
}

@GLOSSDEF{ b2b,
	word="B2B",
	definition="\gloss{business_to_business}"
}

@GLOSSDEF{ b2c,
	word="B2C",
	definition="\businessCOM to \customerCOM"
}

@GLOSSDEF{ b2g,
	word="B2G",
	definition="\businessCOM to \government"
}

@GLOSSDEF{ g2g,
	word="G2G",
	definition="\government to \government"
}

@GLOSSDEF{ c2c,
	word="C2C",
	definition="\customerCOM to \customerCOM"
}

@GLOSSDEF{ out_of_the_box_feature,
	word="Out of the Box",
	definition="An out of the box \featureCPT ó \functionality, particularmente en \softwarePC, es una \featureCPT ó \functionality de un producto que funciona inmediatamente despues de la instalación sin ninguna configuración o modificación \cite{online_meaning_outofthebox}."
}

@GLOSSDEF{ instruction_prefetch,
	word="prefetch",
	definition="En \textit{computer architecture}, \textit{instruction prefetch} es una técnica usada en \microprocessors para \speedupCPT la ejecución de un programa reduciendo los estados de espera."
}

@GLOSSDEF{ orm,
	word="ORM",
	definition="\gloss{object_relational_mapping}"
}

@GLOSSDEF{ object_relational_mapping,
	word="Object-relational mapping",
	definition="En ciencias de la computación es una técnica de programación para convertir datos entre \typesystem incompatibles en lenguajes de programación \objectOrientedPL."
}

@GLOSSDEF{ minifying,
	word="minifying",
	definition="\textit{Minification}, en lenguajes de programación y especialmente en \javaScriptNAME, es el proceso de remover todos los caracteres innecesarios desde \sourcecode sin cambiar su funcionalidad."
}

@GLOSSDEF{ source_maps,
	word="source maps",
	definition="Es un archivo generado por \minifier el cual comprime un \mapping del archivo \minified a la version original sin comprimir \cite{online_javascript_sourcemap}."
}

@GLOSSDEF{ lamp_stack,
	word="LAMP",
	definition="\linux, \apacheNAME, \mysqlNAME, \phpNAME"
}

******************** TODO ********************
@GLOSSDEF{ amp_stack,
	word="AMP",
	definition="\apacheNAME, \mysqlNAME, \phpNAME"
}
This is a list of AMP (Apache, MySQL, Perl/PHP/Python) solution stacks for all computer platforms; these software bundles are used to run dynamic Web sites or servers. There are LAMPs (for Linux); WAMPs (for Windows); MAMPs (for Macintosh); SAMPs (for Solaris); and FAMPs (for FreeBSD).

@GLOSSDEF{ minimongo,
	word="Minimongo",
	definition="Una implementación \clientSideAS de \mongodbNAME que soporta consultas básicas, incluyendo algunas geo-espaciales."
}

@GLOSSDEF{ osi_model,
	word="OSI",
	definition="Open System Interconnection"
}

@GLOSSDEF{ e_ecommerce,
	word="EE-Commerce",
	definition=" \gloss{easy_ecommerce}."
}

@GLOSSDEF{ easy_ecommerce,
	word="Easy e-Commerce",
	definition=" Easy \gloss{ecommerce}, es un \frameworkPC \gloss{ecommerce} para el desarrollo flexible y ágil de soluciones \gloss{ecommerce} a fin de disminuir la complejidad en el desarrollo, así como los costos recursos humanos y duración del proyecto."
}

@GLOSSDEF{ luhmann_theory,
	word="Luhmann's theory",
	definition="\cite{luhmann1979trust}"
}

@GLOSSDEF{ multi_channel,
	word="Multi Channel",
	definition=" \Multi \channelCOM \retailing es el conjunto de actividades involucradas en la venta de mercancías o servicios a los consumidores a través de mapas de un canal. Esta definición distingue \Multi \channelCOM \retailing de\Multimedia \Marketing en que típicamente involucra el use de de múltiples \channels para simplificar la comunicación con \customersCOM \cite{zhang2010crafting}."
}

@GLOSSDEF{ spa,
	word="SPA",
	definition="\gloss{single_page_app}"
}

@GLOSSDEF{ single_page_app,
	word="Single Page Application",
	definition="Single Page Application"
}


@GLOSSDEF{ uri,
	word="URI",
	definition=" Uniform Resource Identifier"
}

@GLOSSDEF{ ria,
	word="RIA",
	definition=" \gloss{rich_internet_app}"
}



@GLOSSDEF{ rich_internet_app,
	word="Single Rich Internet Application",
	definition="Single Rich Internet Application"
}

@GLOSSDEF{ gnu_gpl_three_license,
	word="GNU GPLv3",
	definition="\gloss{gnu_general_public_license_three}"
}

@GLOSSDEF{ gnu_general_public_license_three,
	word="GNU General Public License version 3",
	definition="Última versión de \gloss{gnu_general_public_license}. Notar que GPLv3 no es compatible GPLv2 por si mismo. Sin embargo, muchos de los programas liberados en GPLv2 permite el uso en términos de la última versión de GPL \cite{online_gnu_gpl_definition}."
}

@GLOSSDEF{ gnu_gpl_license,
	word="GNU GPL",
	definition="\gloss{gnu_general_public_license}"
}

@GLOSSDEF{ gnu_general_public_license,
	word="GNU General Public License",
	definition="Licencia de \softwarePC utilizada para la mayoría de los programas de GNU y para más de la mitad de los paquetes de software libre. La última es la versión 3\cite{online_gnu_gpl_definition}."
}

@GLOSSDEF{ bsd_three_license,
	word="BSD 3-Clause License",
	definition="\gloss{berkeley_software_distribution_three_license}"
}

@GLOSSDEF{ berkeley_software_distribution_three_license,
	word="Berkeley Software Distribution",
	definition="3-clause license es una \permissive \openSourcePC \license, que impone mínimas restricciones para el uso del \softwarePC \cite{online_bsd_three_clause_licenses}."
}

@GLOSSDEF{ op_soft_license,
	word="OSL",
	definition="\gloss{open_software_license}"
}

@GLOSSDEF{ open_software_license,
	word="Open Software License",
	definition="Open Software \License es una licencia tipo \copyleft, con una clausula de rescisión provocada por la presentación de una demanda alegando violación de patentes \cite{online_open_source_licenses}."
}

@GLOSSDEF{ multi_tier_pricing,
	word="Multi-Tier Pricing",
	definition=" Differential ó Tiered Pricing es la práctica de establecer diferentes precios para diferentes \markets, típicamente precios más altos en \markets más ricos,  y precios más bajos en \markets más pobres \cite{rights2002integrating}."
}
definition="Ver \gloss{tiered_pricing}"

@GLOSSDEF{ tiered_pricing,
	word="Tiered Pricing",
	definition=" Differential ó Tiered Pricing es la práctica de establecer diferentes precios para diferentes \markets, típicamente precios más altos en \markets más ricos,  y precios más bajos en \markets más pobres \cite{rights2002integrating}."
}

@GLOSSDEF{ representational_state_transfer,
	word="Representational State Transfer",
	definition="Es un conjunto de restricciones arquitectónicas que intenta minimizar la \latency y la comunicación \networkINT mientras al mismo tiempo maximiza la independencia y la \scalabilityQA de las componentes de la implementación. Esto es logrado agregando restricciones en \connectorSemanticsAS donde otros estilos se han focalizado en \componentSemanticsAS. Rest permite \caching y la reutilización de las interacciones, sustitución dinámica de \hypermediaINT \cite{fielding2002principled}."
}

REST is a coordinated set of architectural constraints that
attempts to minimize latency and network communication
while at the same time maximizing the independence and
scalability of component implementations. This is achieved
by placing constraints on connector semantics where other
styles have focused on component semantics. REST enables
the caching and reuse of interactions, dynamic
substitutability of components, and processing of actions by
intermediaries, thereby meeting the needs of an Internetscale
distributed hypermedia system.


@GLOSSDEF{ rest,
	word="REST",
	definition=" \gloss{representational_state_transfer}"
}

@GLOSSDEF{ restful,
	word="RESTful",
	definition=" Termino utilizado para referirse a un \webINT \serviceCPT que implementa la arquitectura \gloss{rest}"
}

@GLOSSDEF{ commodity_hardware,
	word="Commodity Hardware",
	definition="Dispositivo o componente de dispositivo que es relativamente barato, altamente disponible y más o menos intercambiable con otro \hardwarePC de su tipo \cite{online_commodity_hardware_def}"
}

@GLOSSDEF{ asyn_rep_db,
	word="Asynchronous Replication",
	definition="Replicado \asynchronousCPT es un enfoque \storeForewardAS para \dataBackupDB.

	Replicado \asynchronousCPT escribe datos primero para el \primaryStorageArrayDB y luego, dependiendo del enfoque de la implementación, \commitsDB datos para ser replicada a \memoryPC o en \journalDB  \diskBasedPC. Entonces esto copia los datos en \realTimeINT o \scheduledCPT intervalos para la replicación de los objetivos \cite{online_asynchronous_replication_def}.
	
	En contraste a replicación \synchronousCPT, replicación \asynchronousCPT está diseñado para trabajar sobre grandes distancias. Esto no requiere tanta \bandwidthINT como en el caso de replicación \synchronousCPT y puede tolerar bajas en la \connectivityINT \cite{online_asynchronous_replication_def}."
}

\asynchronousCPT \replicationDB is un enfoque \storeForewardAS para \dataBackupDB.

	Asynchronous replication writes data to the primary storage array first and then, depending on the implementation approach, commits data to be replicated to memory or a disk-based journal. It then copies the data in real-time or at scheduled intervals to replication targets \cite{online_asynchronous_replication_def
	
Unlike synchronous replication, asynchronous replication is designed to work over long distances. It does not require as much bandwidth as synchronous replication and can tolerate some degradation in connectivity\cite{online_asynchronous_replication_def}.

@GLOSSDEF{ single_point_failure,
	word="Single Point of Failure",
	definition=" Es una componente de un sistema crítico con la habilidad de cesar las operaciones durante un fallo. \gloss{spof_siglas} no son deseables para un sistema que requiere \reliabilityQA y \availabilityQA, tales como aplicaciones de \softwarePC, \networksINT ó \supplyChainsCPT \cite{online_single_point_failure_def}."
}
A single point of failure (SPOF) is a critical system component with the ability to cease system operations during failover. SPOFs are undesirable to systems requiring reliability and availability, such as software applications, networks or supply chains.

@GLOSSDEF{ spof_siglas,
	word="SPOF",
	definition=" \gloss{single_point_failure}"
}

@GLOSSDEF{ supply_chain_def,
	word="Supply Chain",
	definition=" Es un sistema de organizaciones, personas, actividades, información, y recursos envueltos en el movimiento de un producto o servicio desde un \supplierCOM a un cliente."
}
A supply chain is a system of organizations, people, activities, information, and resources involved in moving a product or service from supplier to customer. Supply chain activities transform natural resources, raw materials, and components into a finished product that is delivered to the end customer. In sophisticated supply chain systems, used products may re-enter the supply chain at any point where residual value is recyclable. Supply chains link value chains [Wikipedia]


@GLOSSDEF{ stemming_def,
	word="Stemming",
	definition=" Es un problema lingüístico que describe el proceso de reducir las palabras a su raíz base. En análisis morfológicos automatizados, la raíz de una palabra puede ser de un menor interés inmediato que sus sufijos, que pueden utilizados como pistas de la estructura gramática \cite{lovins1968development}."
}
A stemming algorithm is a computational procedure which reduces all words with the same root (or, if prefixes are left untouched, the same stem) to a common form, usually by stripping each word of its derivational and inflectional suffixes. Researchers in many areas of computational linguistics and information retrieval find this a desirable step, but for varying reasons. In automated morphological analysis, the root of a word may be of less immediate interest than its suffixes, which can be used as clues to grammatical structure.

@GLOSSDEF{ api_siglas,
	word="API",
	definition=" \gloss{app_pro_int}"
}

@GLOSSDEF{ app_pro_int,
	word="Application Programming Interfaces",
	definition="Es un conjunto de \routinesAS, protocolos, y herramientas para el desarrollo de aplicaciones. La \apiAS especifica cómo la componente de  \softwarePC debería interactuar y son utilizados en la programación de las componentes GUI. Una buena \apiAS facilita el desarrollo de un programa proporcionando todos los bloques \buildPL. Un programador luego pone los bloques juntos \cite{online_api_def}."
}
%API, an abbreviation of application program interface, is a set of routines, protocols, and tools for building software applications. The API specifies how software components should interact and are used when programming graphical user interface (GUI) components.  A good API makes it easier to develop a program by providing all the building blocks. A programmer then puts the blocks together.

@GLOSSDEF{ orm_siglas,
	word="ORM",
	definition=" \gloss{obj_rel_mapp}"
}

@GLOSSDEF{ obj_rel_mapp,
	word="Object-Relational Mapper",
	definition=" Es una técnica de programación en la cual un descriptor de \metadataPL es utilizado para conectar \objectCodePL a una \dataBaseDB relacional. \objectCodePL es escrito en programación \objectOrientedPL; lenguajes como \javaNAME o \csharpNAME. \ormAS convierte \dataPC tipos de sistemas que no pueden coexistir dentro de la \dataBaseDB relacional y lenguajes \oopPL \cite{online_object_relational_mapping_def}."
}
Object-relational mapping (ORM) is a programming technique in which a metadata descriptor is used to connect object code to a relational database. Object code is written in object-oriented programming (OOP) languages such as Java or C#. ORM converts data between type systems that are unable to coexist within relational databases and OOP languages.

@GLOSSDEF{ rack_middleware_ruby,
	word="Rack Middleware",
	definition="Rack proporciona una interfaz mínima entre \webserversINT soportando \rubyNAME y \rubyNAME \frameworksPC \cite{online_introduction_rack_middleware}."
}
Rack provides an minimal interface between webservers supporting Ruby and Ruby frameworks.

@GLOSSDEF{ ruby_gems,
	word="Gems",
	definition="Son \packagesAS que contienen tanto su información, como dependencias necesarias a instalar \cite{online_technology_ruby_gems}."
}
Gems are packages similar to Ebuilds. They contain package information along with files to install.

%TODO
@GLOSSDEF{ http_verbs,
	word="HTTP verbs",
	definition="."
}


@GLOSSDEF{ computed_properties_emberjs_def,
	word="Computed Properties",
	definition="En \emberjsNAME, computed properties permiten declarar funciones y propiedades. Es posible crear uno definiendo una computed property como una funcion, la cual \emberjsNAME llamará automaticamente cuando se solicite la propiedad. Es posible usar entonces de la misma manera que se usaria, \staticPropertyAS \cite{online_technology_ember_computed_properties_def}.

	Es súper útil para tomar una ó más propiedades y transformando ó manipulando su \dataPC para crear un nuevo valor \cite{online_technology_ember_computed_properties_def}."
}

In a nutshell, computed properties let you declare functions as properties. You create one by defining a computed property as a function, which Ember will automatically call when you ask for the property. You can then use it the same way you would any normal, static property.

It's super handy for taking one or more normal properties and transforming or manipulating their data to create a new value.

@GLOSSDEF{ web_crawlers,
	word="Crawlers",
	definition="ver \crawlerINT"
}

@GLOSSDEF{ web_spider,
	word="Spider",
	definition="ver \crawlerINT"
}

@GLOSSDEF{ web_bot,
	word="Bot",
	definition="ver \crawlerINT"
}

@GLOSSDEF{ web_crawler,
	word="Crawler",
	definition="Es un programa que visita \websitesINT y lee sus páginas y otras informaciones con la intención de crear entradas para un \searchEngIndxINT. Los principales \searchEnginesCPT en la \webINT tienen este tipo de programa, el cual también es conocido como \spiderINT o un \botINT. Crawlers son típicamente programados para visitar \sitesINT que han sido publicados por sus dueños como contenido nuevo o actualizado. \sitesINT o páginas específicas pueden ser visitadas e \indexedDB. Crawlers aparentemente reciben su nombre porque ellos \textit{crawl} a través de un \sitesINT de una página en algún momento, siguiendo los \linksINT a otras páginas en el \sitesINT hasta que todas las páginas sean revisadas \cite{online_meaning_crawler}."
}
A crawler is a program that visits Web sites and reads their pages and other information in order to create entries for a search engine index. The major search engines on the Web all have such a program, which is also known as a "spider" or a "bot." Crawlers are typically programmed to visit sites that have been submitted by their owners as new or updated. Entire sites or specific pages can be selectively visited and indexed. Crawlers apparently gained the name because they crawl through a site a page at a time, following the links to other pages on the site until all pages have been read.

@GLOSSDEF{ sear_eng_indx,
	word="search engine index",
	definition="Es el lugar donde toda la \dataDB que el \searchEngineCPT a recolectado es \storedCPT. Es este el que proporciona los resultados para las busquedas de \queriesDB, y páginas que son \storedCPT dentro del search engine index que aparece en la página de los resultados del \searchEnginesCPT \cite{online_brickMarketing_what_is_sear_eng_index}."
}
Search engine indexing is the process of a search engine collecting, parses and stores data for use by the search engine. The actual search engine index is the place where all the data the search engine has collected is stored. It is the search engine index that provides the results for search queries, and pages that are stored within the search engine index that appear on the search engine results page. 

@GLOSSDEF{ resource_descriptor,
	word="Resource Descriptor",
	definition=" Son documentos (\seriaLanPL usualmente bien conocidos tales como \xmlNAME, \rdfNAME y \jsonNAME) que proporcionan información \machineReadablePC sobre \resourcesCPT (\resourceCPT \metadataPL) para el propósito de promover \interoperabilityQA y asistir en la interacción con \resourcesCPT \unknownCPT para apoyar \interfacesAS conocidas \cite{online_memo_resource_descriptor}."
}
Resource descriptors are documents (usually
   based on well known serialization languages such as XML, RDF, and
   JSON) which provide machine-readable information about resources
   (resource metadata) for the purpose of promoting interoperability and
   assist in interacting with unknown resources that support known
   interfaces.

@GLOSSDEF{ serialization_languages,
	word="Serialization Languages",
	definition="Serialization Languages."
}

@GLOSSDEF{boilerplate_code,
	word="boilerplate code",
	definition=" En tecnología de la información, \textit{boilerplate} es una unidad de escritura que puede ser reutilizada una y otra vez sin cambios. Por extensión, la idea es en ocasiones aplicada a programación \reusableQA como \textit{boilerplate code} \cite{online_meaning_boilerplate_code}"
}
In information technology, a boilerplate is a unit of writing that can be reused over and over without change. By extension, the idea is sometimes applied to reusable programming as in "boilerplate code." The term derives from steel manufacturing, where boilerplate is steel rolled into large plates for use in steam boilers. The implication is either that boilerplate writing has been time-tested and strong as "steel," or possibly that it has been rolled out into something strong enough for repeated reuse. Legal agreements, including software and hardware terms and conditions, make abundant use of boilerplates. The term is also used as an adjective as in "a boilerplate paragraph" and also as in "The entire document was boilerplate."


@GLOSSDEF{ dry_design,
	word="DRY",
	definition="\dontRptYourQA"
}

@GLOSSDEF{ dont_rpt_your,
	word="don’t repeat yourself",
	definition="En \softEnginAS, es un principio de desarrollo de \softwarePC, cuyo objetivo es reducir la repetición de información de todo tipo, especialmente útil en arquitecturas \multiTierAS."
}
%In software engineering, don’t repeat yourself (DRY) is a principle of software development, aimed at reducing repetition of information of all kinds, especially useful in multi-tier architectures. The DRY principle is stated as “Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.” The principle has been formulated by Andy Hunt and Dave Thomas in their book The Pragmatic Programmer. They apply it quite broadly to include “database schemas, test plans, the build system, even documentation.”[1] When the DRY principle is applied successfully, a modification of any single element of a system does not require a change in other logically unrelated elements. Additionally, elements that are logically related all change predictably and uniformly, and are thus kept in sync. Besides using methods and subroutines in their code, Thomas and Hunt rely on code generators, automatic build systems, and scripting languages to observe the DRY principle across layers.


@GLOSSDEF{ dsl_modem_siglas,
	word="DSL (\modemPC)",
	definition=" ver \diSubsLineNAME"
}

@GLOSSDEF{ digital_subscriber_line,
	word="Digital Subscriber Line",
	definition="Es una tecnología para permitir información \highBandwithCPT hacia hogares y pequeños \businessCOM sobre lineas telefónicas ordinarias \cite{online_digital_subscriber_line_def}."
}
DSL (Digital Subscriber Line) is a technology for bringing high- bandwidth information to homes and small businesses over ordinary copper telephone lines.

@GLOSSDEF{ domain_specific_languaje,
	word="domain-specific Languaje",
	definition="Son lenguajes pequeños, focalizados en un aspecto particular de un sistema de \softwarePC. Es posible construir una programa completo con DSL"
}
DSLs are small languages, focused on a particular aspect of a software system. You can't build a whole program with a DSL, but you often use multiple DSLs in a system mainly written in a general purpose language.

@GLOSSDEF{ dsl_lenguaje_siglas,
	word="DSL",
	definition="Siglas de \domainSpecificLangPL."
}

@GLOSSDEF{ electronic_data_interchange,
	word="Electronic Data Interchange",
	definition=" Es el intercambio de documentación de \businessCOM \comToComINT en un formato electrónico \standard entre \partnerCPT \businessCOM \cite{online_electronic_data_interchange_def}"
}
is the computer-to-computer exchange of business documents in a standard electronic format between business partners.

@GLOSSDEF{ electronic_funds_transfer,
	word="Electronic Funds Transfer",
	definition=" Es un sistema de transferencia de dinero desde una cuenta bancaria a otra directamente sin ningún tipo de papel moneda que intercambie de manos \cite{online_electronic_funds_transfer_def}."
}
 is a system of transferring money from one bank account directly to another without any paper money changing hands.

@GLOSSDEF{ mvp_siglas,
	word="MVP",
	definition=" Siglas de \minViableProductCOM."
}

@GLOSSDEF{ min_viable_product,
	word="Minimum viable product",
	definition=" Es aquel producto que tiene solo aquellas \featuresCPT necesarias, y no más que permitan un producto entregable para que los usuarios lo vean, al menos aquellos que tienen un interés monetario, y empiecen a entregar \feedback \cite{online_minimum_viable_products_def}.

	¿Pero por que mínimo? Porque el tiempo y dinero son severamente limitados. Se desea el mejor resultado de inversión. Aprendizaje máximo con el mínimo esfuerzo \cite{online_minimum_viable_products_def}. "
}

A minimum viable product is “that product which has just those features and no more that allows you to ship a product that early adopters see and, at least some of whom resonate with, pay you money for, and start to give you feedback on”.

But why minimal? Because your time and money are severely limited. You want the biggest “bang for your buck”: maximum learning with minimal effort.

@GLOSSDEF{ test_fixtures,
	word="test fixtures",
	definition=" Ver \gloss{test_fixture}."
}

@GLOSSDEF{ test_fixture,
	word="test fixture",
	definition=" Un test fixture es un estado definido utilizado como base para correr \testsCPT. El proposito de un \testFixturePC es asegurar que existe un \environmentPL fijo y conocido en el cual \testsCPT se ejecutan de tal forma que los resultados son repetibles \cite{online_test_fixtures}. Ejemplos de \testFixturePC son:
	\begin{itemize}
		\item
			Cargar una \dataBasesDB con un conjunto específico y conocido de \dataDB.
		\item
			Copiar un conjunto específico de \filesCPT.
		\item
			Preparación de datos de entrada creación/\setupCPT de objectos simulados ó \mockObjectsCPT.
	\end{itemize}"
}
A test fixture is a fixed state of a set of objects used as a baseline for running tests. The purpose of a test fixture is to ensure that there is a well known and fixed environment in which tests are run so that results are repeatable. Examples of fixtures:
Loading a database with a specific, known set of data
Copying a specific known set of files
Preparation of input data and setup/creation of fake or mock objects
In other word, creating a test fixture is to create a set of objects initialized to certain states.

@GLOSSDEF{ hijacking,
	word="hijacking",
	definition="Corresponde al ingreso total que una firma recive \cite{online_revenue_definition}"
}

TODO Agergar descripcion
@GLOSSDEF{ cross_site_scripting,
	word="cross-site-scripting",
	definition="."
}

@GLOSSDEF{ clickjacking,
	word="clickjacking",
	definition="Es un término primeramente introducido por Jeremiah Grossman y Robert Hansen el año 2008 para describir la técnica para la cual ataques cross-domain son realizados \gloss{hijacking} \clicksPC del \mousePC para realizar acciones que el usuario no tienen conocimiento\cite{huang2012clickjacking}"
}
Clickjacking is a term first introduced by Jeremiah Grossman and Robert Hansen in 2008 to describe a technique whereby cross-domain attacks are performed by ‘hijacking’ user-initiated mouse clicks to perform actions that the user did not intend1.

@GLOSSDEF{conversion_rate,
	word="Conversion Rate",
	definition=" \textit{Conversion Rate} de un sitio web es la medida de éxito de una campaña pagada de inclusión. Una \textit{Conversion Rate} es medida por el numero de visitantes potenciales realizando la acción deseada, sea la acción de comprar un producto, completar un formulario, o algún otro objetivo del sitio web. For ejemplo , si hay 100 viistantee para una página web particular a través de publicidad de pago por \click, y solo uno de esos 100 compra el producto que vende el sitio web, entonces la \textit{Conversion Rate} para esta publicidad en particular es del 1\% \cite{online_conversion_rate_meaning}"
}
One of the most important parts of paid inclusion campaigns, the conversion rate of a website is the measurement of the success of a paid inclusion campaign. A conversion rate is measured by the number of potential visitors performing the desired action, whether the action is buying a product, filling out a form, or some other goal of the web page. For example, if there are 100 visitors to a particular web page via a pay per click ad, and one of those 100 buys the product the website sells, then the conversion rate for that particular ad is one percent. The larger the conversion rate of a web page means the more successful the website will be as well as how successful the paid inclusion campaign is.


@GLOSSDEF{order_fulfillment,
	word="Order fulfillment",
	definition=" Es definido como aquellos pasos envueltos en recivir, procesar y entregar las ordenes a los clientes finales \cite{online_efulfillmentservice_order_fulfillment_meaning}."
}
%Order fulfillment is defined as the steps involved in receiving, processing and delivering orders to end customers.

@GLOSSDEF{shipping_zone,
	word="Shipping Zone",
	definition="Corresponde a regiones y países donde se realizan entregas."
}

@GLOSSDEF{shipping_zones,
	word="Shipping Zones",
	definition="Ver \gloss{shipping_zone}."
}

@GLOSSDEF{Shipping_rates,
	word="Shipping Rates",
	definition=" Corresponde a las tarifas de envío a los diferentes \gloss{shipping_zone}."
}

TODO Agergar descripcion
@GLOSSDEF{merchant_account,
	word="merchant account",
	definition="\cite{online_shopify_official_meaning_nerchant_account}"
}
Every payment made with a credit card involves the transfer of funds to a merchant account, which a merchant (that is you) holds directly with a bank. The merchant has full responsibility for the transactions that occur with their account, and each bank has its own terms of service to which account‐holders must adhere. If you want to accept credit card payments through your Shopify store, you will need either a merchant account of your own or the services of a third‐party payment processor like PayPal.

TODO Agergar descripcion
@GLOSSDEF{payment_gateway,
	word="payment gateway",
	definition=" \cite{online_shopify_official_meaning_payment_account}"
}
An ecommerce payment gateway is a service that authorizes credit card payments and processes them securely with a user’s merchant account. Often, a merchant account and payment gateway are set up in one process through the same company.

TODO Agergar descripcion
@GLOSSDEF{third_party_payment,
	word="third party payment",
	definition=" \cite{online_shopify_official_meaning_third_party_processor}"
}
A third-party processor such as PayPal lets you accept online payments without a merchant account of your own. Instead, they let you use their merchant account under their own terms of service, usually with very little setup required.

@GLOSSDEF{eps_siglas,
	word="EPS",
	definition=" Siglas de Electronic Payment System "
}

TODO
@GLOSSDEF{siglas_cvv2,
	word="CVV2",
	definition=" \cite{online_getcreditcardnumbers_meaning_cvv_number}"
}

TODO
@GLOSSDEF{siglas_cvv,
	word="CVV",
	definition=" \cite{online_getcreditcardnumbers_meaning_cvv_number}"
}
The card security code, sometimes called card verification value (CVV or CVV2) is a term for security features for credit or debit card transactions, providing increased protection for the merchants against credit card fraud. You can correctly identify your CVV number by looking at the back of your credit card and searching for a special 3 digit code. These digits represent your card security code.


@GLOSSDEF{vendor_ecommerce,
	word="Vendor",
	definition=" También conocidos como proveedor, es una idividuo o compañia que vende productos o servicios a alguien más en la cadena de producción \cite{online_whatis_techtarget_vendor_def}."
}
A vendor, also known as a supplier, is an individual or company that sells goods or services to someone else in the economic production chain. 